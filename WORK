package DataAndAlgortithims;

import java.util.Iterator;
import java.util.NoSuchElementException;


public class DoubleStack<Item> implements Iterable<Item>{

    public static class Node<Item> {
        private Item item;
        private Node<Item>  next;
        private Node<Item>  previous;

    }


    private Node<Item> head; // top of stack 1


    private Node<Item> tail; // top of stack 2
    private int length;




    public DoubleStack(){
        this.head = null;
        this.tail = null;
        this.length = 0;


    }



    public boolean empty(){
        return length == 0; // head ==null

    }


    public int size(){    // returns the size of the linked list
        return length;
    }




    public void pushTop(Item item){   /// yesss
        Node<Item> newnode = new Node<>();      // create a new node.
        if (empty()){
            tail = newnode;                     // if my node is empty place it in the back
        }else {
            head.previous = newnode;            //
        }
        newnode.next = head;
        head = newnode;
        length++;



    }



    public void pushBottom(Item item){
        Node<Item> newnode = new Node<>();
        if(empty()){
            head = newnode;
        }else {                // if not empty insert at the back of the linked list
            tail.next = newnode;
            newnode.previous = tail;

        }
        tail = newnode;
        length++;




    }
    // remove from top
    public Item popTop() {    /// YES
       if(empty()){
           throw  new NoSuchElementException();    // if its empty then let me know.
       }
       Node<Item> temp = head;                     // create a holding value for the head
       if(head == null){
           tail = null;                           // if the head has nothing in it then so does the tail
       }

       else {
           head.next.previous = null;    // break the link between head and the next node    the pointer to be exact
       }
       head = head.next;
       temp.next = null;                 // breaks the link off of the previous head
       return temp.item;                 // creates the boundry again          null <- temp -> null

    }


    //                                     Head                        Tail
    public Item popBottom() {    // null<-[[][1][]]-> <-[[][2][]]-><-[[][3][]] -> null
        if(empty()){                                        //          temp
            throw new NoSuchElementException();
        }
        Node<Item> temp = tail;   // create the temp node for the tail
        if (head == tail){
            head = null;
        }else {                                // I need to remove the two pointers

//                     Head                        Tail
            // null<-[[][1][]]-> <-[[][2][null]]<-[[][3][]] -> null
                                         //         temp

            tail.previous.next = null;
        }


        //          Head         Tail
        // null<-[[][1][]]-> <-[[][2][]]-> null    |    null <-[[][3][]] -> null
        //                                                      temp

        tail = tail.previous;
        temp.previous = null;
        return temp.item;

    }



    public Iterator<Item> iterator() {

    }


    public Item peek() {
        if (empty()) throw new NoSuchElementException("Stack underflow");
        return head.item;
    }

    public String toString() {
        StringBuilder s = new StringBuilder();
        for (Item item : this)
            s.append(item + " ");
        return s.toString();
    }

    


    public static void main(String[] args) {


    }

}
import java.util.Iterator;
import java.util.NoSuchElementException;

public class DoubleStack<item> implements Iterable<item> {

    private Node<item> First; // Top
    private int size;

    private Node<item> Second; // Bottom

    public DoubleStack() {
        First = new Node<item>();
        Second = new Node<item>();
        size = 0;
    }

    public boolean empty() {
        return size() == 0;

    }
    public int size(){
        return size;
    }
    // remove from top
    public item popTop() {
        if (empty()) throw new NoSuchElementException();
        item item = First.item;
        First = First.next;
        size--;
        return item;
    }

    public void pushTop(item nitem) {
        if (nitem == null) throw new IllegalArgumentException();
        Node<item> oldfirst = First;
        First = new Node<>();
        First.item = nitem;
        First.next = oldfirst;
        size++;
        if (size == 1) {
            Second= First;
        }
    }

    public void pushBottom(item nitem) {
        if (nitem == null) throw new IllegalArgumentException();
        Node<item> oldlast = Second;
        Second = new Node<>();
        Second.item = nitem;
        Second.next = oldlast;
        size++;
        if (size == 1) {
            First = Second;
        }
    }

    public item popBottom() {
        if (!empty()) throw new NoSuchElementException();
        item Item = Second.item;
        Second = Second.next;
        size--;
        if (size == 0) {
            First = null;
        }
        return Item;
    }

    public Iterator<item> iterator() {
        return new FancyIterator<>(First);
    }

    private static class Node<Item> {
        Item item;
        Node<Item> next;

    }

    private static class FancyIterator<Item> implements Iterator<Item> {
        private Node<Item> nextNode;

        public FancyIterator(Node<Item> startNode) {
            nextNode = startNode;
        }

        @Override
        public boolean hasNext() {
            return nextNode != null;
        }

        @Override
        public Item next() {
            if (!hasNext()) throw new NoSuchElementException();
            Node<Item> save = nextNode;
            nextNode = nextNode.next;
            return save.item;
        }
    }

    public static void main(String[] args) {
        DoubleStack<Integer> stack = new DoubleStack<>();
        stack.pushTop(1);
        stack.pushTop(2);
        stack.pushBottom(3);
        stack.pushBottom(4);

        System.out.println("Elements popped from top:");
        while (!stack.empty()) {
            System.out.println(stack.popTop());
        }

        System.out.println("Elements popped from bottom:");
        stack.pushTop(1);
        stack.pushTop(2);
        stack.pushBottom(3);
        stack.pushBottom(4);
        while (!stack.empty()) {
            System.out.println(stack.popBottom());
        }
    }
}
