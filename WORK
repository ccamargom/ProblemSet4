public class DoubleStack<item> implements Iterable<item>{




    private Node<item> First; // top of stack 1
    private int size1;

    private Node<item> Second; // top of stack 2
    private int size2;
    public static class Node<Item> {
        Item item;
        Node<Item> next;
    }



    public DoubleStack(){
  this.First = null;
  this.Second = null;
  this.size1 = 0;
  this.size2 = 0;


    }
    public boolean empty(){

        if(size1==0 && size2 ==0 ) {return false;}
        else{
            return true;
        }
    }




    // remove from top
    public item popTop() {
        item item = First.item;
        First = First.next;
        size1--;
        return item;
    }


    public void pushTop(item nitem){
        Node<item> oldfirst = First;
        First = new Node<>();
        First.item = nitem;
        First.next = oldfirst;
        size1++;
    }

    public void pushBottom(Node<item> item){

        Node<item> oldfirst = Second;
        Second = new Node<item>();
        Second.item = item;
        Second.next = oldfirst;
        size2++;

    }
    public item popBottom() {    // Tecnically this is the bottom of the stack
        item Item = Second.item;
        Second = Second.next;
        size2--;
        return Item;
    }



    public Iterator<item> iterator() {
        return null;
    }


    public static void main(String[] args) {

    }

}
